{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahmad Ramzy\\\\Contact-List\\\\src\\\\ImageInput.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst readFileAsDataURL = file => new Promise(resolve => {\n  const reader = new FileReader();\n\n  reader.onload = event => {\n    resolve(event.target.result);\n  };\n\n  reader.readAsDataURL(file);\n});\n\nconst resizeImage = (imageURL, canvas, maxHeight) => new Promise(resolve => {\n  const image = new Image();\n\n  image.onload = () => {\n    const context = canvas.getContext('2d');\n\n    if (image.height > maxHeight) {\n      image.width *= maxHeight / image.height;\n      image.height = maxHeight;\n    }\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvas.width = image.width;\n    canvas.height = image.height;\n    context.drawImage(image, 0, 0, image.width, image.height);\n    resolve(canvas.toDataURL('image/jpeg'));\n  };\n\n  image.src = imageURL;\n});\n/**\n * A custom <input> that dynamically reads and resizes image files before\n * submitting them to the server as data URLs. Also, shows a preview of the image.\n */\n\n\nclass ImageInput extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: ''\n    };\n\n    this.handleFileChange = event => {\n      const file = event.target.files[0];\n\n      if (file && file.type.match(/^image\\//)) {\n        readFileAsDataURL(file).then(originalURL => {\n          resizeImage(originalURL, this.canvas, this.props.maxHeight).then(url => {\n            this.setState({\n              value: url\n            });\n          });\n        });\n      } else {\n        this.setState({\n          value: ''\n        });\n      }\n    };\n\n    this.handleFormReset = () => {\n      this.setState({\n        value: ''\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.canvas = document.createElement('canvas');\n    this.fileInput.form.addEventListener('reset', this.handleFormReset);\n  }\n\n  componentWillUnmount() {\n    this.fileInput.form.removeEventListener('reset', this.handleFormReset);\n  }\n\n  render() {\n    const {\n      className,\n      name\n    } = this.props;\n    const {\n      value\n    } = this.state;\n    const style = {\n      position: 'relative'\n    };\n\n    if (value) {\n      style.backgroundImage = `url(\"${value}\")`;\n      style.backgroundRepeat = 'no-repeat';\n      style.backgroundPosition = 'center';\n      style.backgroundSize = 'cover';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"hidden\",\n        name: name,\n        value: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: node => this.fileInput = node,\n        type: \"file\",\n        onChange: this.handleFileChange,\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          opacity: 0\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nImageInput.propTypes = {\n  className: PropTypes.string,\n  name: PropTypes.string,\n  maxHeight: PropTypes.number\n};\nexport default ImageInput;","map":{"version":3,"sources":["C:/Users/Ahmad Ramzy/Contact-List/src/ImageInput.js"],"names":["React","PropTypes","readFileAsDataURL","file","Promise","resolve","reader","FileReader","onload","event","target","result","readAsDataURL","resizeImage","imageURL","canvas","maxHeight","image","Image","context","getContext","height","width","clearRect","drawImage","toDataURL","src","ImageInput","Component","state","value","handleFileChange","files","type","match","then","originalURL","props","url","setState","handleFormReset","componentDidMount","document","createElement","fileInput","form","addEventListener","componentWillUnmount","removeEventListener","render","className","name","style","position","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","node","top","left","opacity","propTypes","string","number"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst readFileAsDataURL = (file) =>\n  new Promise(resolve => {\n    const reader = new FileReader()\n\n    reader.onload = (event) => {\n      resolve(event.target.result)\n    }\n\n    reader.readAsDataURL(file)\n  })\n\nconst resizeImage = (imageURL, canvas, maxHeight) =>\n  new Promise(resolve => {\n    const image = new Image()\n\n    image.onload = () => {\n      const context = canvas.getContext('2d')\n\n      if (image.height > maxHeight) {\n        image.width *= maxHeight / image.height\n        image.height = maxHeight\n      }\n\n      context.clearRect(0, 0, canvas.width, canvas.height)\n      canvas.width = image.width\n      canvas.height = image.height\n\n      context.drawImage(image, 0, 0, image.width, image.height)\n\n      resolve(canvas.toDataURL('image/jpeg'))\n    }\n\n    image.src = imageURL\n  })\n\n/**\n * A custom <input> that dynamically reads and resizes image files before\n * submitting them to the server as data URLs. Also, shows a preview of the image.\n */\nclass ImageInput extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    name: PropTypes.string,\n    maxHeight: PropTypes.number\n  }\n\n  state = {\n    value: ''\n  }\n\n  handleFileChange = (event) => {\n    const file = event.target.files[0]\n\n    if (file && file.type.match(/^image\\//)) {\n      readFileAsDataURL(file).then(originalURL => {\n        resizeImage(originalURL, this.canvas, this.props.maxHeight).then(url => {\n          this.setState({ value: url })\n        })\n      })\n    } else {\n      this.setState({ value: '' })\n    }\n  }\n\n  handleFormReset = () => {\n    this.setState({ value: '' })\n  }\n\n  componentDidMount() {\n    this.canvas = document.createElement('canvas')\n    this.fileInput.form.addEventListener('reset', this.handleFormReset)\n  }\n\n  componentWillUnmount() {\n    this.fileInput.form.removeEventListener('reset', this.handleFormReset)\n  }\n\n  render() {\n    const { className, name } = this.props\n    const { value } = this.state\n\n    const style = {\n      position: 'relative'\n    }\n\n    if (value) {\n      style.backgroundImage = `url(\"${value}\")`\n      style.backgroundRepeat = 'no-repeat'\n      style.backgroundPosition = 'center'\n      style.backgroundSize = 'cover'\n    }\n\n    return (\n      <div className={className} style={style}>\n        <input type=\"hidden\" name={name} value={value} />\n        <input\n          ref={node => this.fileInput = node}\n          type=\"file\"\n          onChange={this.handleFileChange}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            opacity: 0\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default ImageInput"]},"metadata":{},"sourceType":"module"}