{"version":3,"sources":["components/ListContact.js","utils/ContactsAPI.js","ImageInput.js","components/CreateContact.js","components/App.js","index.js"],"names":["ListContact","state","query","updateQuery","setState","trim","clearQuery","this","props","contacts","onDeleteContact","showingContacts","filter","c","name","toLowerCase","includes","className","type","placeholder","value","onChange","event","target","to","length","onClick","map","contact","style","backgroundImage","avatarURL","handle","id","React","Component","protoTypes","PropTypes","array","isRequired","func","api","process","REACT_APP_CONTACTS_API_URL","token","localStorage","Math","random","toString","substr","headers","remove","fetch","method","then","res","json","data","create","body","JSON","stringify","readFileAsDataURL","file","Promise","resolve","reader","FileReader","onload","result","readAsDataURL","resizeImage","imageURL","canvas","maxHeight","image","Image","context","getContext","height","width","clearRect","drawImage","toDataURL","src","ImageInput","handleFileChange","files","match","originalURL","url","handleFormReset","document","createElement","fileInput","form","addEventListener","removeEventListener","position","backgroundRepeat","backgroundPosition","backgroundSize","ref","node","top","left","opacity","CreateContact","handleSubmit","e","preventDefault","values","serializeForm","hash","how","onCreateContact","onSubmit","App","createContact","ContactsAPI","currentState","concat","removeContact","exact","path","render","history","push","ReactDOM","querySelector"],"mappings":"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","file":"static/js/main.75b01ea1.chunk.js","sourcesContent":["import { PropTypes } from \"prop-types\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nclass ListContact extends React.Component {\r\n  static protoTypes = {\r\n    contact: PropTypes.array.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n  };\r\n  state = {\r\n    query: \"\",\r\n  };\r\n  updateQuery = (query) => {\r\n    this.setState(() => ({\r\n      query: query.trim(),\r\n    }));\r\n  };\r\n  clearQuery = () => {\r\n    this.updateQuery(\"\");\r\n  };\r\n  render() {\r\n    const { query } = this.state;\r\n    const { contacts, onDeleteContact } = this.props;\r\n    const showingContacts =\r\n      query === \"\"\r\n        ? contacts\r\n        : contacts.filter((c) =>\r\n            c.name.toLowerCase().includes(query.toLowerCase())\r\n          );\r\n    return (\r\n      <div className=\"list-contacts\">\r\n        <div className=\"list-contacts-top\">\r\n          <input\r\n            className=\"search-contacts\"\r\n            type=\"text\"\r\n            placeholder=\"Search Contacts\"\r\n            value={query}\r\n            onChange={(event) => this.updateQuery(event.target.value)}\r\n          />\r\n          <Link to=\"/create\" className=\"add-contact\">\r\n            Add\r\n          </Link>\r\n        </div>\r\n        {showingContacts.length !== contacts.length && (\r\n          <div className=\"showing-contacts\">\r\n            <span>\r\n              Showing {showingContacts.length} of {contacts.length}{\" \"}\r\n            </span>{\" \"}\r\n            <button onClick={this.clearQuery}>Show all</button>\r\n          </div>\r\n        )}\r\n        <ol className=\"contact-list\">\r\n          {showingContacts.map((contact) => (\r\n            <li key={contact.id} className=\"contact-list-item\">\r\n              <div\r\n                className=\"contact-avatar\"\r\n                style={{ backgroundImage: `url(${contact.avatarURL})` }}\r\n              ></div>\r\n              <div className=\"contact-details\">\r\n                <p>{contact.name}</p>\r\n                <p>{contact.handle}</p>\r\n              </div>\r\n              <button\r\n                onClick={() => onDeleteContact(contact)}\r\n                className=\"contact-remove\"\r\n              >\r\n                Remove\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ol>{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ListContact;\r\n","const api = process.env.REACT_APP_CONTACTS_API_URL || 'http://localhost:5001'\r\n\r\nlet token = localStorage.token\r\n\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/contacts`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.contacts)\r\n\r\nexport const remove = (contact) =>\r\n  fetch(`${api}/contacts/${contact.id}`, { method: 'DELETE', headers })\r\n    .then(res => res.json())\r\n    .then(data => data.contact)\r\n\r\nexport const create = (body) =>\r\n  fetch(`${api}/contacts`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(body)\r\n  }).then(res => res.json())","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst readFileAsDataURL = (file) =>\n  new Promise(resolve => {\n    const reader = new FileReader()\n\n    reader.onload = (event) => {\n      resolve(event.target.result)\n    }\n\n    reader.readAsDataURL(file)\n  })\n\nconst resizeImage = (imageURL, canvas, maxHeight) =>\n  new Promise(resolve => {\n    const image = new Image()\n\n    image.onload = () => {\n      const context = canvas.getContext('2d')\n\n      if (image.height > maxHeight) {\n        image.width *= maxHeight / image.height\n        image.height = maxHeight\n      }\n\n      context.clearRect(0, 0, canvas.width, canvas.height)\n      canvas.width = image.width\n      canvas.height = image.height\n\n      context.drawImage(image, 0, 0, image.width, image.height)\n\n      resolve(canvas.toDataURL('image/jpeg'))\n    }\n\n    image.src = imageURL\n  })\n\n/**\n * A custom <input> that dynamically reads and resizes image files before\n * submitting them to the server as data URLs. Also, shows a preview of the image.\n */\nclass ImageInput extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    name: PropTypes.string,\n    maxHeight: PropTypes.number\n  }\n\n  state = {\n    value: ''\n  }\n\n  handleFileChange = (event) => {\n    const file = event.target.files[0]\n\n    if (file && file.type.match(/^image\\//)) {\n      readFileAsDataURL(file).then(originalURL => {\n        resizeImage(originalURL, this.canvas, this.props.maxHeight).then(url => {\n          this.setState({ value: url })\n        })\n      })\n    } else {\n      this.setState({ value: '' })\n    }\n  }\n\n  handleFormReset = () => {\n    this.setState({ value: '' })\n  }\n\n  componentDidMount() {\n    this.canvas = document.createElement('canvas')\n    this.fileInput.form.addEventListener('reset', this.handleFormReset)\n  }\n\n  componentWillUnmount() {\n    this.fileInput.form.removeEventListener('reset', this.handleFormReset)\n  }\n\n  render() {\n    const { className, name } = this.props\n    const { value } = this.state\n\n    const style = {\n      position: 'relative'\n    }\n\n    if (value) {\n      style.backgroundImage = `url(\"${value}\")`\n      style.backgroundRepeat = 'no-repeat'\n      style.backgroundPosition = 'center'\n      style.backgroundSize = 'cover'\n    }\n\n    return (\n      <div className={className} style={style}>\n        <input type=\"hidden\" name={name} value={value} />\n        <input\n          ref={node => this.fileInput = node}\n          type=\"file\"\n          onChange={this.handleFileChange}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            opacity: 0\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default ImageInput","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ImageInput from \".././ImageInput\";\r\nimport serializeForm from \"form-serialize\";\r\nclass CreateContact extends React.Component {\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const values = serializeForm(e.target, { hash: true });\r\n    if (this.props.how) {\r\n      this.props.onCreateContact(values);\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Link className=\"close-create-contact\" to=\"/\">\r\n          Close\r\n        </Link>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <ImageInput\r\n            className=\"create-contact-avatar-input\"\r\n            name=\"avatarURL\"\r\n            maxHeight={64}\r\n          />\r\n          <div className=\"create-contact-details\">\r\n            <input type=\"text\" name=\"name\" placeholder=\"name\" />\r\n            <input type=\"text\" name=\"handle\" placeholder=\"handle\" />\r\n            <button>Add Contact</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CreateContact;\r\n","import React from \"react\";\nimport ListContact from \"./ListContact\";\nimport * as ContactsAPI from \".././utils/ContactsAPI\";\nimport CreateContact from \"./CreateContact\";\nimport { Route } from \"react-router-dom\";\nclass App extends React.Component {\n  state = {\n    contacts: [],\n  };\n  componentDidMount() {\n    ContactsAPI.getAll().then((contacts) => {\n      this.setState(() => ({\n        contacts,\n      }));\n    });\n  }\n  createContact = (contact) => {\n    ContactsAPI.create(contact).then((contact) => {\n      this.setState((currentState) => ({\n        contacts: currentState.contacts.concat([contact]),\n      }));\n    });\n  };\n  removeContact = (contact) => {\n    this.setState((currentState) => ({\n      contacts: currentState.contacts.filter((c) => {\n        return c.id !== contact.id;\n      }),\n    }));\n    ContactsAPI.remove(contact);\n  };\n  render() {\n    return (\n      <div>\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <ListContact\n              contacts={this.state.contacts}\n              onDeleteContact={this.removeContact}\n            />\n          )}\n        />\n        <Route\n          path=\"/create\"\n          render={({ history }) => (\n            <CreateContact\n              onCreateContact={(contact) => {\n                this.createContact(contact);\n                history.push(\"/\");\n              }}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}